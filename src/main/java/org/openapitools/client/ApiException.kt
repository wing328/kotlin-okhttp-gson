/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints,
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client

import javax.annotation.Generated

/**
 *
 * ApiException class.
 */
@Generated(value = ["org.openapitools.codegen.languages.JavaClientCodegen"], date = "2024-04-14T17:24:33.796785+08:00[Asia/Hong_Kong]", comments = "Generator version: 7.5.0-SNAPSHOT")
class ApiException : Exception {
    /**
     * Get the HTTP status code.
     *
     * @return HTTP status code
     */
    var code = 0
        private set

    /**
     * Get the HTTP response headers.
     *
     * @return A map of list of string
     */
    var responseHeaders: Map<String, List<String>>? = null
        private set

    /**
     * Get the HTTP response body.
     *
     * @return Response body in the form of string
     */
    var responseBody: String? = null
        private set

    /**
     *
     * Constructor for ApiException.
     */
    constructor()

    /**
     *
     * Constructor for ApiException.
     *
     * @param throwable a [java.lang.Throwable] object
     */
    constructor(throwable: Throwable?) : super(throwable)

    /**
     *
     * Constructor for ApiException.
     *
     * @param message the error message
     */
    constructor(message: String?) : super(message)
    /**
     *
     * Constructor for ApiException.
     *
     * @param message the error message
     * @param throwable a [java.lang.Throwable] object
     * @param code HTTP status code
     * @param responseHeaders a [java.util.Map] of HTTP response headers
     * @param responseBody the response body
     */
    /**
     *
     * Constructor for ApiException.
     *
     * @param message the error message
     * @param throwable a [java.lang.Throwable] object
     * @param code HTTP status code
     * @param responseHeaders a [java.util.Map] of HTTP response headers
     */
    @JvmOverloads
    constructor(message: String?, throwable: Throwable?, code: Int, responseHeaders: Map<String, List<String>>?, responseBody: String? = null) : super(message, throwable) {
        this.code = code
        this.responseHeaders = responseHeaders
        this.responseBody = responseBody
    }

    /**
     *
     * Constructor for ApiException.
     *
     * @param message the error message
     * @param code HTTP status code
     * @param responseHeaders a [java.util.Map] of HTTP response headers
     * @param responseBody the response body
     */
    constructor(message: String?, code: Int, responseHeaders: Map<String, List<String>>?, responseBody: String?) : this(message, null as Throwable?, code, responseHeaders, responseBody)

    /**
     *
     * Constructor for ApiException.
     *
     * @param code HTTP status code
     * @param responseHeaders a [java.util.Map] of HTTP response headers
     * @param responseBody the response body
     */
    constructor(code: Int, responseHeaders: Map<String, List<String>>?, responseBody: String) : this("Response Code: $code Response Body: $responseBody", null as Throwable?, code, responseHeaders, responseBody)

    /**
     *
     * Constructor for ApiException.
     *
     * @param code HTTP status code
     * @param message a [java.lang.String] object
     */
    constructor(code: Int, message: String?) : super(message) {
        this.code = code
    }

    /**
     *
     * Constructor for ApiException.
     *
     * @param code HTTP status code
     * @param message the error message
     * @param responseHeaders a [java.util.Map] of HTTP response headers
     * @param responseBody the response body
     */
    constructor(code: Int, message: String?, responseHeaders: Map<String, List<String>>?, responseBody: String?) : this(code, message) {
        this.responseHeaders = responseHeaders
        this.responseBody = responseBody
    }

    override val message: String
        /**
         * Get the exception message including HTTP response data.
         *
         * @return The exception message
         */
        get() = String.format("Message: %s%nHTTP response code: %s%nHTTP response body: %s%nHTTP response headers: %s",
                super.message, this.code, responseBody, responseHeaders)

    companion object {
        private const val serialVersionUID = 1L
    }
}
