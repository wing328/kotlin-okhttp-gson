/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints,
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.model

import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.TypeAdapter
import com.google.gson.TypeAdapterFactory
import com.google.gson.reflect.TypeToken
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import org.openapitools.client.JSON
import java.io.IOException
import java.lang.Boolean
import java.util.logging.Level
import java.util.logging.Logger
import javax.annotation.Generated
import kotlin.Any
import kotlin.ClassCastException
import kotlin.Exception
import kotlin.RuntimeException
import kotlin.String
import kotlin.Throws

@Generated(value = ["org.openapitools.codegen.languages.JavaClientCodegen"], date = "2024-04-14T17:24:33.796785+08:00[Asia/Hong_Kong]", comments = "Generator version: 7.5.0-SNAPSHOT")
class FruitReq : AbstractOpenApiSchema {
    class CustomTypeAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T> {
            if (!FruitReq::class.java.isAssignableFrom(type.rawType)) {
                return null // this class only serializes 'FruitReq' and its subtypes
            }
            val elementAdapter = gson.getAdapter(JsonElement::class.java)
            val adapterAppleReq = gson.getDelegateAdapter(this, TypeToken.get(AppleReq::class.java))
            val adapterBananaReq = gson.getDelegateAdapter(this, TypeToken.get(BananaReq::class.java))
            return object : TypeAdapter<FruitReq?>() {
                @Throws(IOException::class)
                override fun write(out: JsonWriter, value: FruitReq?) {
                    if (value == null || value.actualInstance == null) {
                        elementAdapter.write(out, null)
                        return
                    }

                    // check if the actual instance is of the type `AppleReq`
                    if (value.actualInstance is AppleReq) {
                        val element = adapterAppleReq.toJsonTree(value.actualInstance as AppleReq?)
                        elementAdapter.write(out, element)
                        return
                    }
                    // check if the actual instance is of the type `BananaReq`
                    if (value.actualInstance is BananaReq) {
                        val element = adapterBananaReq.toJsonTree(value.actualInstance as BananaReq?)
                        elementAdapter.write(out, element)
                        return
                    }
                    throw IOException("Failed to serialize as the type doesn't match oneOf schemas: AppleReq, BananaReq")
                }

                @Throws(IOException::class)
                override fun read(`in`: JsonReader): FruitReq? {
                    val deserialized: Any? = null
                    val jsonElement = elementAdapter.read(`in`)
                    var match = 0
                    val errorMessages = ArrayList<String>()
                    var actualAdapter: TypeAdapter<*> = elementAdapter

                    // deserialize AppleReq
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppleReq.Companion.validateJsonElement(jsonElement)
                        actualAdapter = adapterAppleReq
                        match++
                        log.log(Level.FINER, "Input data matches schema 'AppleReq'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppleReq failed with `%s`.", e.message))
                        log.log(Level.FINER, "Input data does not match schema 'AppleReq'", e)
                    }
                    // deserialize BananaReq
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BananaReq.Companion.validateJsonElement(jsonElement)
                        actualAdapter = adapterBananaReq
                        match++
                        log.log(Level.FINER, "Input data matches schema 'BananaReq'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BananaReq failed with `%s`.", e.message))
                        log.log(Level.FINER, "Input data does not match schema 'BananaReq'", e)
                    }
                    if (match == 1) {
                        val ret = FruitReq()
                        ret.actualInstance = actualAdapter.fromJsonTree(jsonElement)
                        return ret
                    }
                    throw IOException(String.format("Failed deserialization for FruitReq: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()))
                }
            }.nullSafe() as TypeAdapter<T>
        }
    }

    constructor() : super("oneOf", Boolean.TRUE)
    constructor(o: AppleReq?) : super("oneOf", Boolean.TRUE) {
        actualInstance = o
    }

    constructor(o: BananaReq?) : super("oneOf", Boolean.TRUE) {
        actualInstance = o
    }

    override val schemas: Map<String?, Class<*>?>?
        get() = Companion.schemas
    override var actualInstance: Any?
        /**
         * Get the actual instance, which can be the following:
         * AppleReq, BananaReq
         *
         * @return The actual instance (AppleReq, BananaReq)
         */
        get() = super.getActualInstance()
        /**
         * Set the instance that matches the oneOf child schema, check
         * the instance parameter is valid against the oneOf child schemas:
         * AppleReq, BananaReq
         *
         * It could be an instance of the 'oneOf' schemas.
         */
        set(instance) {
            if (instance == null) {
                super.setActualInstance(instance)
                return
            }
            if (instance is AppleReq) {
                super.setActualInstance(instance)
                return
            }
            if (instance is BananaReq) {
                super.setActualInstance(instance)
                return
            }
            throw RuntimeException("Invalid instance type. Must be AppleReq, BananaReq")
        }

    @get:Throws(ClassCastException::class)
    val appleReq: AppleReq?
        /**
         * Get the actual instance of `AppleReq`. If the actual instance is not `AppleReq`,
         * the ClassCastException will be thrown.
         *
         * @return The actual instance of `AppleReq`
         * @throws ClassCastException if the instance is not `AppleReq`
         */
        get() = super.getActualInstance() as AppleReq

    @get:Throws(ClassCastException::class)
    val bananaReq: BananaReq?
        /**
         * Get the actual instance of `BananaReq`. If the actual instance is not `BananaReq`,
         * the ClassCastException will be thrown.
         *
         * @return The actual instance of `BananaReq`
         * @throws ClassCastException if the instance is not `BananaReq`
         */
        get() = super.getActualInstance() as BananaReq

    /**
     * Convert an instance of FruitReq to an JSON string
     *
     * @return JSON string
     */
    fun toJson(): String {
        return JSON.getGson().toJson(this)
    }

    companion object {
        private val log = Logger.getLogger(FruitReq::class.java.name)

        // store a list of schema names defined in oneOf
        val schemas: Map<String, Class<*>> = HashMap()

        init {
            schemas.put("AppleReq", AppleReq::class.java)
            schemas.put("BananaReq", BananaReq::class.java)
        }

        /**
         * Validates the JSON Element and throws an exception if issues found
         *
         * @param jsonElement JSON Element
         * @throws IOException if the JSON Element is invalid with respect to FruitReq
         */
        @Throws(IOException::class)
        fun validateJsonElement(jsonElement: JsonElement) {
            // validate oneOf schemas one by one
            var validCount = 0
            val errorMessages = ArrayList<String>()
            // validate the json string with AppleReq
            try {
                AppleReq.Companion.validateJsonElement(jsonElement)
                validCount++
            } catch (e: Exception) {
                errorMessages.add(String.format("Deserialization for AppleReq failed with `%s`.", e.message))
                // continue to the next one
            }
            // validate the json string with BananaReq
            try {
                BananaReq.Companion.validateJsonElement(jsonElement)
                validCount++
            } catch (e: Exception) {
                errorMessages.add(String.format("Deserialization for BananaReq failed with `%s`.", e.message))
                // continue to the next one
            }
            if (validCount != 1) {
                throw IOException(String.format("The JSON string is invalid for FruitReq with oneOf schemas: AppleReq, BananaReq. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()))
            }
        }

        /**
         * Create an instance of FruitReq given an JSON string
         *
         * @param jsonString JSON string
         * @return An instance of FruitReq
         * @throws IOException if the JSON string is invalid with respect to FruitReq
         */
        @Throws(IOException::class)
        fun fromJson(jsonString: String?): FruitReq {
            return JSON.getGson().fromJson(jsonString, FruitReq::class.java)
        }
    }
}
