/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints,
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.model

import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.TypeAdapter
import com.google.gson.TypeAdapterFactory
import com.google.gson.reflect.TypeToken
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import org.openapitools.client.JSON
import java.io.IOException
import java.lang.Boolean
import java.util.logging.Level
import java.util.logging.Logger
import javax.annotation.Generated
import kotlin.Any
import kotlin.ClassCastException
import kotlin.Exception
import kotlin.RuntimeException
import kotlin.String
import kotlin.Throws

@Generated(value = ["org.openapitools.codegen.languages.JavaClientCodegen"], date = "2024-04-14T17:24:33.796785+08:00[Asia/Hong_Kong]", comments = "Generator version: 7.5.0-SNAPSHOT")
class Pig : AbstractOpenApiSchema {
    class CustomTypeAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T> {
            if (!Pig::class.java.isAssignableFrom(type.rawType)) {
                return null // this class only serializes 'Pig' and its subtypes
            }
            val elementAdapter = gson.getAdapter(JsonElement::class.java)
            val adapterBasquePig = gson.getDelegateAdapter(this, TypeToken.get(BasquePig::class.java))
            val adapterDanishPig = gson.getDelegateAdapter(this, TypeToken.get(DanishPig::class.java))
            return object : TypeAdapter<Pig?>() {
                @Throws(IOException::class)
                override fun write(out: JsonWriter, value: Pig?) {
                    if (value == null || value.actualInstance == null) {
                        elementAdapter.write(out, null)
                        return
                    }

                    // check if the actual instance is of the type `BasquePig`
                    if (value.actualInstance is BasquePig) {
                        val element = adapterBasquePig.toJsonTree(value.actualInstance as BasquePig?)
                        elementAdapter.write(out, element)
                        return
                    }
                    // check if the actual instance is of the type `DanishPig`
                    if (value.actualInstance is DanishPig) {
                        val element = adapterDanishPig.toJsonTree(value.actualInstance as DanishPig?)
                        elementAdapter.write(out, element)
                        return
                    }
                    throw IOException("Failed to serialize as the type doesn't match oneOf schemas: BasquePig, DanishPig")
                }

                @Throws(IOException::class)
                override fun read(`in`: JsonReader): Pig? {
                    val deserialized: Any? = null
                    val jsonElement = elementAdapter.read(`in`)
                    var match = 0
                    val errorMessages = ArrayList<String>()
                    var actualAdapter: TypeAdapter<*> = elementAdapter

                    // deserialize BasquePig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BasquePig.Companion.validateJsonElement(jsonElement)
                        actualAdapter = adapterBasquePig
                        match++
                        log.log(Level.FINER, "Input data matches schema 'BasquePig'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BasquePig failed with `%s`.", e.message))
                        log.log(Level.FINER, "Input data does not match schema 'BasquePig'", e)
                    }
                    // deserialize DanishPig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DanishPig.Companion.validateJsonElement(jsonElement)
                        actualAdapter = adapterDanishPig
                        match++
                        log.log(Level.FINER, "Input data matches schema 'DanishPig'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DanishPig failed with `%s`.", e.message))
                        log.log(Level.FINER, "Input data does not match schema 'DanishPig'", e)
                    }
                    if (match == 1) {
                        val ret = Pig()
                        ret.actualInstance = actualAdapter.fromJsonTree(jsonElement)
                        return ret
                    }
                    throw IOException(String.format("Failed deserialization for Pig: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()))
                }
            }.nullSafe() as TypeAdapter<T>
        }
    }

    constructor() : super("oneOf", Boolean.FALSE)
    constructor(o: BasquePig?) : super("oneOf", Boolean.FALSE) {
        actualInstance = o
    }

    constructor(o: DanishPig?) : super("oneOf", Boolean.FALSE) {
        actualInstance = o
    }

    override val schemas: Map<String?, Class<*>?>?
        get() = Companion.schemas
    override var actualInstance: Any?
        /**
         * Get the actual instance, which can be the following:
         * BasquePig, DanishPig
         *
         * @return The actual instance (BasquePig, DanishPig)
         */
        get() = super.getActualInstance()
        /**
         * Set the instance that matches the oneOf child schema, check
         * the instance parameter is valid against the oneOf child schemas:
         * BasquePig, DanishPig
         *
         * It could be an instance of the 'oneOf' schemas.
         */
        set(instance) {
            if (instance is BasquePig) {
                super.setActualInstance(instance)
                return
            }
            if (instance is DanishPig) {
                super.setActualInstance(instance)
                return
            }
            throw RuntimeException("Invalid instance type. Must be BasquePig, DanishPig")
        }

    @get:Throws(ClassCastException::class)
    val basquePig: BasquePig?
        /**
         * Get the actual instance of `BasquePig`. If the actual instance is not `BasquePig`,
         * the ClassCastException will be thrown.
         *
         * @return The actual instance of `BasquePig`
         * @throws ClassCastException if the instance is not `BasquePig`
         */
        get() = super.getActualInstance() as BasquePig

    @get:Throws(ClassCastException::class)
    val danishPig: DanishPig?
        /**
         * Get the actual instance of `DanishPig`. If the actual instance is not `DanishPig`,
         * the ClassCastException will be thrown.
         *
         * @return The actual instance of `DanishPig`
         * @throws ClassCastException if the instance is not `DanishPig`
         */
        get() = super.getActualInstance() as DanishPig

    /**
     * Convert an instance of Pig to an JSON string
     *
     * @return JSON string
     */
    fun toJson(): String {
        return JSON.getGson().toJson(this)
    }

    companion object {
        private val log = Logger.getLogger(Pig::class.java.name)

        // store a list of schema names defined in oneOf
        val schemas: Map<String, Class<*>> = HashMap()

        init {
            schemas.put("BasquePig", BasquePig::class.java)
            schemas.put("DanishPig", DanishPig::class.java)
        }

        /**
         * Validates the JSON Element and throws an exception if issues found
         *
         * @param jsonElement JSON Element
         * @throws IOException if the JSON Element is invalid with respect to Pig
         */
        @Throws(IOException::class)
        fun validateJsonElement(jsonElement: JsonElement) {
            // validate oneOf schemas one by one
            var validCount = 0
            val errorMessages = ArrayList<String>()
            // validate the json string with BasquePig
            try {
                BasquePig.Companion.validateJsonElement(jsonElement)
                validCount++
            } catch (e: Exception) {
                errorMessages.add(String.format("Deserialization for BasquePig failed with `%s`.", e.message))
                // continue to the next one
            }
            // validate the json string with DanishPig
            try {
                DanishPig.Companion.validateJsonElement(jsonElement)
                validCount++
            } catch (e: Exception) {
                errorMessages.add(String.format("Deserialization for DanishPig failed with `%s`.", e.message))
                // continue to the next one
            }
            if (validCount != 1) {
                throw IOException(String.format("The JSON string is invalid for Pig with oneOf schemas: BasquePig, DanishPig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()))
            }
        }

        /**
         * Create an instance of Pig given an JSON string
         *
         * @param jsonString JSON string
         * @return An instance of Pig
         * @throws IOException if the JSON string is invalid with respect to Pig
         */
        @Throws(IOException::class)
        fun fromJson(jsonString: String?): Pig {
            return JSON.getGson().fromJson(jsonString, Pig::class.java)
        }
    }
}
