/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints,
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.model

import java.util.Objects
import javax.annotation.Generated

/**
 * Abstract class for oneOf,anyOf schemas defined in OpenAPI spec
 */
@Generated(value = ["org.openapitools.codegen.languages.JavaClientCodegen"], date = "2024-04-14T17:24:33.796785+08:00[Asia/Hong_Kong]", comments = "Generator version: 7.5.0-SNAPSHOT")
abstract class AbstractOpenApiSchema(
        /**
         * Get the schema type (e.g. anyOf, oneOf)
         *
         * @return the schema type
         */
        // schema type (e.g. oneOf, anyOf)
        val schemaType: String,
        /**
         * Set the actual instance
         *
         * @param instance the actual instance of the schema/object
         */
        // is nullable
        val actualInstance: Boolean) {
    /**
     * Get the actual instance
     *
     * @return an instance of the actual schema/object
     */
    //@JsonValue
    // store the actual instance of the schema/object
    private var instance: Any? = null

    /**
     * Get the list of oneOf/anyOf composed schemas allowed to be stored in this object
     *
     * @return an instance of the actual schema/object
     */
    abstract val schemas: Map<String?, Class<*>?>?
    val actualInstanceRecursively: Any?
        /**
         * Get the instant recursively when the schemas defined in oneOf/anyof happen to be oneOf/anyOf schema as well
         *
         * @return an instance of the actual schema/object
         */
        get() = getActualInstanceRecursively(this)

    private fun getActualInstanceRecursively(`object`: AbstractOpenApiSchema?): Any? {
        return if (`object`!!.actualInstance == null) {
            null
        } else if (`object`.actualInstance is AbstractOpenApiSchema) {
            getActualInstanceRecursively(`object`.actualInstance as AbstractOpenApiSchema)
        } else {
            `object`.actualInstance
        }
    }

    override fun toString(): String {
        val sb = StringBuilder()
        sb.append("class ").append(javaClass).append(" {\n")
        sb.append("    instance: ").append(toIndentedString(instance)).append("\n")
        sb.append("    isNullable: ").append(toIndentedString(actualInstance)).append("\n")
        sb.append("    schemaType: ").append(toIndentedString(schemaType)).append("\n")
        sb.append("}")
        return sb.toString()
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private fun toIndentedString(o: Any?): String {
        return o?.toString()?.replace("\n", "\n    ") ?: "null"
    }

    override fun equals(o: Any?): Boolean {
        if (this === o) {
            return true
        }
        if (o == null || javaClass != o.javaClass) {
            return false
        }
        val a = o as AbstractOpenApiSchema
        return instance == a.instance && actualInstance == a.actualInstance && schemaType == a.schemaType
    }

    override fun hashCode(): Int {
        return Objects.hash(instance, actualInstance, schemaType)
    }

    /**
     * Is nullable
     *
     * @return true if it's nullable
     */
    fun isNullable(): Boolean {
        return if (java.lang.Boolean.TRUE == actualInstance) {
            java.lang.Boolean.TRUE
        } else {
            java.lang.Boolean.FALSE
        }
    }
}
