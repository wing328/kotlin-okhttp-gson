/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints,
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client

import javax.annotation.Generated

@Generated(value = ["org.openapitools.codegen.languages.JavaClientCodegen"], date = "2024-04-14T17:24:33.796785+08:00[Asia/Hong_Kong]", comments = "Generator version: 7.5.0-SNAPSHOT")
object StringUtil {
    /**
     * Check if the given array contains the given value (with case-insensitive comparison).
     *
     * @param array The array
     * @param value The value to search
     * @return true if the array contains the value
     */
    fun containsIgnoreCase(array: Array<String?>, value: String?): Boolean {
        for (str in array) {
            if (value == null && str == null) {
                return true
            }
            if (value != null && value.equals(str, ignoreCase = true)) {
                return true
            }
        }
        return false
    }

    /**
     * Join an array of strings with the given separator.
     *
     *
     * Note: This might be replaced by utility method from commons-lang or guava someday
     * if one of those libraries is added as dependency.
     *
     *
     * @param array     The array of strings
     * @param separator The separator
     * @return the resulting string
     */
    fun join(array: Array<String>, separator: String?): String {
        val len = array.size
        if (len == 0) {
            return ""
        }
        val out = StringBuilder()
        out.append(array[0])
        for (i in 1 until len) {
            out.append(separator).append(array[i])
        }
        return out.toString()
    }

    /**
     * Join a list of strings with the given separator.
     *
     * @param list      The list of strings
     * @param separator The separator
     * @return the resulting string
     */
    fun join(list: Collection<String?>, separator: String?): String {
        val iterator = list.iterator()
        val out = StringBuilder()
        if (iterator.hasNext()) {
            out.append(iterator.next())
        }
        while (iterator.hasNext()) {
            out.append(separator).append(iterator.next())
        }
        return out.toString()
    }
}
