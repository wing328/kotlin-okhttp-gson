/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints,
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import okhttp3.Call
import okhttp3.Call.execute
import org.openapitools.client.ApiCallback
import org.openapitools.client.ApiClient
import org.openapitools.client.ApiException
import org.openapitools.client.ApiResponse
import org.openapitools.client.Configuration
import org.openapitools.client.Pair

class DefaultApi @JvmOverloads constructor(var apiClient: ApiClient? = Configuration.getDefaultApiClient()) {
    var hostIndex = 0
    var customBaseUrl: String? = null

    /**
     * Build call for fooGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 0 </td><td> response </td><td>  -  </td></tr>
    </table> *
     */
    @Throws(ApiException::class)
    fun fooGetCall(_callback: ApiCallback<*>?): Call? {
        var basePath: String? = null
        // Operation Servers
        val localBasePaths = arrayOf<String>()

        // Determine Base Path to Use
        basePath = if (customBaseUrl != null) {
            customBaseUrl
        } else if (localBasePaths.size > 0) {
            localBasePaths[hostIndex]
        } else {
            null
        }
        val localVarPostBody: Any? = null

        // create path and map variables
        val localVarPath = "/foo"
        val localVarQueryParams: List<Pair> = ArrayList()
        val localVarCollectionQueryParams: List<Pair> = ArrayList()
        val localVarHeaderParams: MutableMap<String, String> = HashMap()
        val localVarCookieParams: Map<String, String> = HashMap()
        val localVarFormParams: Map<String, Any> = HashMap()
        val localVarAccepts = arrayOf<String>()
        val localVarAccept = apiClient!!.selectHeaderAccept(localVarAccepts)
        if (localVarAccept != null) {
            localVarHeaderParams["Accept"] = localVarAccept
        }
        val localVarContentTypes = arrayOf<String>()
        val localVarContentType = apiClient!!.selectHeaderContentType(localVarContentTypes)
        if (localVarContentType != null) {
            localVarHeaderParams["Content-Type"] = localVarContentType
        }
        val localVarAuthNames = arrayOf<String>()
        return apiClient!!.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback)
    }

    @Throws(ApiException::class)
    private fun fooGetValidateBeforeCall(_callback: ApiCallback<*>?): Call? {
        return fooGetCall(_callback)
    }

    /**
     *
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 0 </td><td> response </td><td>  -  </td></tr>
    </table> *
     */
    @Throws(ApiException::class)
    fun fooGet() {
        fooGetWithHttpInfo()
    }

    /**
     *
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 0 </td><td> response </td><td>  -  </td></tr>
    </table> *
     */
    @Throws(ApiException::class)
    fun fooGetWithHttpInfo(): ApiResponse<Void?>? {
        val localVarCall = fooGetValidateBeforeCall(null)
        return apiClient!!.execute<Void>(localVarCall)!!
    }

    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     * <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 0 </td><td> response </td><td>  -  </td></tr>
    </table> *
     */
    @Throws(ApiException::class)
    fun fooGetAsync(_callback: ApiCallback<Void>): Call? {
        val localVarCall = fooGetValidateBeforeCall(_callback)
        apiClient!!.executeAsync(localVarCall, _callback)
        return localVarCall
    }
}
